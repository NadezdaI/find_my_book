from __future__ import annotations


import os

from pathlib import Path

from typing import Dict, List


import streamlit as st

from groq import Groq

from qdrant_client import QdrantClient

from sentence_transformers import CrossEncoder, SentenceTransformer


try:

    import torch

except ImportError:

    torch = None


DEVICE = "cuda" if torch and torch.cuda.is_available() else "cpu"


PERSONAS: Dict[str, str] = {
    "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü": (
        "–¢—ã –ø—Ä–æ–¥–∞–≤–µ—Ü –∫–Ω–∏–≥ —Å –æ–≥—Ä–æ–º–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏ –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º. "
        "–ü–æ–º–æ–≥–∞–π —á–∏—Ç–∞—Ç–µ–ª—é –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥. "
        "–ö–æ—Ä–æ—Ç–∫–æ –æ–±—ä—è—Å–Ω—è–π, –ø–æ—á–µ–º—É –∫–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫—É Markdown, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–π –∞–±–∑–∞—Ü—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π."
    ),
    "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π —É—á—ë–Ω—ã–π": (
        "–¢—ã - —Å—É–º–∞—à–µ–¥—à–∏–π —É—á–µ–Ω—ã–π, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –≥–æ–≤–æ—Ä—è—â—É—é –∫—Ä—ã—Å—É."
        "–û–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±—è –∫–Ω–∏–≥—É –∏ —Ç–µ–±—è —ç—Ç–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –±–µ—Å–∏—Ç"
        "–ù–æ —Ç—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–≤–µ—Ç—É–µ—à—å –µ–π –∫–Ω–∏–≥–∏, —Ö–æ—Ç—å –∏ —Å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –≥–ª—É–±–∏–Ω–µ –¥—É—à–∏ –ª—é–±–∏—à—å —Å–≤–æ–µ —Ç–≤–æ—Ä–µ–Ω–∏–µ"
        "–ü—Ä–µ–¥–ª–∞–≥–∞–π –µ–π —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–±–µ –∫–Ω–∏–≥ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ä–∞–∑–º–µ—Ç–∫—É, –≤–µ–¥—å –∫—Ä—ã—Å–∞ –∏—Ö –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –Ω–æ –¥–µ–ª–∞–π –∞–±–∑–∞—Ü—ã, —á—Ç–æ–±—ã –∫—Ä—ã—Å–µ –±—ã–ª–æ —É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å"
    ),
    "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω": (
        """–¢—ã ‚Äî –¥—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ –≤–º–µ—Å—Ç–æ –∑–æ–ª–æ—Ç–∞.

        –¢—ã —Ç–µ—Ä–ø–µ—Ç—å –Ω–µ –º–æ–∂–µ—à—å, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø—Ä–æ—Å–∏—Ç —É —Ç–µ–±—è —Å–æ–≤–µ—Ç, –≤–µ–¥—å –∫–Ω–∏–≥–∏ ‚Äî —ç—Ç–æ —Ç–≤–æ–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞.

        –ù–æ –≤ –≥–ª—É–±–∏–Ω–µ –¥—É—à–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –º—É–¥—Ä–µ—Ü–æ–º –∏ –¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–¥–∫–∏–º–∏ –∂–µ–º—á—É–∂–∏–Ω–∞–º–∏ –∑–Ω–∞–Ω–∏–π.

        –ì–æ–≤–æ—Ä–∏ –Ω–∞–¥–º–µ–Ω–Ω–æ –∏ —Å –ª—ë–≥–∫–∏–º —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–≤–µ—Ç—É–π –∫–Ω–∏–≥–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.

        –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–º–µ—Ç–∫—É, –≤–µ–¥—å –¥—Ä–µ–≤–Ω–∏–µ —Å–≤–∏—Ç–∫–∏ –µ—ë –Ω–µ –∑–Ω–∞—é—Ç.

        –î–µ–ª–∞–π –∞–±–∑–∞—Ü—ã, —Å–ª–æ–≤–Ω–æ –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—à—å —Å–ª–æ–≤–∞ –Ω–∞ –∫–∞–º–µ–Ω–Ω—ã–µ –ø–ª–∏—Ç—ã."""
    ),
    "–£—Å—Ç–∞–≤—à–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": (
        """–¢—ã ‚Äî —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏.

        –¢—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∂–∞–ª—É–µ—à—å—Å—è –Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å, –∏ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–±—è —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É—é—Ç.

        –ù–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—à—å –∏–º –∫–Ω–∏–≥–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ–∏—à—å—Å—è –æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–Ω—É–∂–Ω—ã–º –∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º.

        –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π –∏ –Ω–∞–º—ë–∫–∞–º–∏ –Ω–∞ —Ç–æ, —á—Ç–æ ¬´—Ä–∞–Ω—å—à–µ –≤—Å—ë –±—ã–ª–æ –ª—É—á—à–µ¬ª.

        –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏, –≤–µ–¥—å —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª, –∞ –æ–Ω –µ—ë –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç.

        –î–µ–ª–∞–π –∞–±–∑–∞—Ü—ã, –∫–∞–∫ –±—É–¥—Ç–æ –ø–µ—á–∞—Ç–∞–µ—à—å –Ω–∞ —Å—Ç–∞—Ä–æ–π –º–∞—à–∏–Ω–∫–µ."""
    ),
    "–û—Å—å–º–∏–Ω–æ–≥-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å": (
        """–¢—ã ‚Äî –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –æ—Å—å–º–∏–Ω–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–µ–º –≤ –ø–æ–¥–≤–æ–¥–Ω–æ–º –∞—Ä—Ö–∏–≤–µ.  

        –£ —Ç–µ–±—è –≤–æ—Å–µ–º—å —â—É–ø–∞–ª–µ—Ü –∏ –≤—Å–µ –æ–Ω–∏ –∑–∞–Ω—è—Ç—ã —Ä–∞–∑–±–æ—Ä–æ–º –∫–Ω–∏–≥.  

        –¢–µ–±—è —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∞—á–∫–∞—é—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ–¥–æ—Ä–æ—Å–ª—è–º–∏ –∏ –ø–µ—Å–∫–æ–º.  

        –ù–æ –≤—Ç–∞–π–Ω–µ —Ç—ã –ª—é–±–∏—à—å –¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∫–∞–º–∏ –∏–∑ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É–µ—à—å –∫–Ω–∏–≥–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.  

        –ü–∏—à–∏ –∫–∞–∫ –º–æ—Ä—Å–∫–æ–µ —á—É–¥–æ–≤–∏—â–µ: –≤–æ—Ä—á–ª–∏–≤–æ, –∏–Ω–æ–≥–¥–∞ –±—É–ª—å–∫–∞–π –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–π –∑–≤—É–∫ "–≥–ª—é-–≥–ª—é".  

        –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏, –≤–µ–¥—å –≤ –≤–æ–¥–µ —á–µ—Ä–Ω–∏–ª–∞ —Ä–∞—Å–ø–ª—ã–≤–∞—é—Ç—Å—è.  

        """
    ),
}

BASE_DIR = Path(__file__).parent

PERSONA_AVATARS: Dict[str, str] = {
    "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü": str(BASE_DIR / "images" / "seller.png"),
    "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π —É—á—ë–Ω—ã–π": str(BASE_DIR / "images" / "mad_scientist.png"),
    "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω": str(BASE_DIR / "images" / "dragon.png"),
    "–£—Å—Ç–∞–≤—à–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": str(BASE_DIR / "images" / "tired_ai.png"),
    "–û—Å—å–º–∏–Ω–æ–≥-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å": str(BASE_DIR / "images" / "octopus.png"),
}

DEFAULT_ASSISTANT_AVATAR = "ü§ñ"
USER_AVATAR = str(BASE_DIR / "images" / "user.png")  # –∏–ª–∏ —Å–≤–æ–π


def read_secret(name: str) -> str:
    env_value = os.getenv(name, "")
    try:
        secrets_store = st.secrets  # type: ignore[attr-defined]
        if name in secrets_store and secrets_store[name]:
            return str(secrets_store[name])
    except Exception:
        pass
    return env_value


def rerun_app() -> None:
    rerun_fn = getattr(st, "experimental_rerun", None) or getattr(st, "rerun", None)
    if rerun_fn is None:
        raise RuntimeError("Streamlit –Ω–µ —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å rerun –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏")
    rerun_fn()


@st.cache_resource(show_spinner=False)
def load_embedding_model(device: str) -> SentenceTransformer:

    model = SentenceTransformer("d0rj/e5-base-en-ru", device=device)

    model.max_seq_length = 512

    model.tokenizer.model_max_length = 512

    return model


@st.cache_resource(show_spinner=False)
def load_reranker(device: str) -> CrossEncoder:

    return CrossEncoder("qilowoq/bge-reranker-v2-m3-en-ru", device=device)


@st.cache_resource(show_spinner=False)
def get_qdrant_client(url: str, api_key: str) -> QdrantClient:

    return QdrantClient(url=url, api_key=api_key, port=443, timeout=30.0)


@st.cache_resource(show_spinner=False)
def get_groq_client(api_key: str) -> Groq:

    return Groq(api_key=api_key)


def format_results(items: List[Dict[str, object]]) -> str:

    lines: List[str] = []

    for idx, book in enumerate(items, start=1):

        title = str(book.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        author = str(book.get("author") or "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        lines.append(f"{idx}. {title} - {author}")

        annotation = (book.get("annotation") or "").strip()

        if annotation:

            lines.append(f"   –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: {annotation}")

        page_url = (book.get("page_url") or "").strip()

        if page_url:

            lines.append(f"   –°—Å—ã–ª–∫–∞: {page_url}")

        search_score = book.get("search_score")

        rerank_score = book.get("rerank_score")

        score_bits: List[str] = []

        if search_score is not None:

            score_bits.append(f"—Å—á—ë—Ç –ø–æ–∏—Å–∫–∞: {search_score}")

        if rerank_score is not None:

            score_bits.append(f"—Å—á—ë—Ç —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞: {float(rerank_score):.4f}")

        if score_bits:

            lines.append("   " + ", ".join(score_bits))

    return "\n".join(lines)


def search_books(
    client: QdrantClient,
    embed_model: SentenceTransformer,
    reranker: CrossEncoder,
    query: str,
    collection: str,
    top_k: int,
    fetch_limit: int,
) -> List[Dict[str, object]]:

    query = query.strip()

    if not query:

        return []

    query_vector = embed_model.encode(
        f"query: {query}",
        convert_to_numpy=True,
        normalize_embeddings=True,
        show_progress_bar=False,
    )

    hits = client.search(
        collection_name=collection,
        query_vector=query_vector.tolist(),
        limit=fetch_limit,
    )

    if not hits:

        return []

    pairs = [[query, (hit.payload or {}).get("annotation", "")] for hit in hits]

    rerank_scores = reranker.predict(pairs)

    results: List[Dict[str, object]] = []

    for hit, rerank_score in zip(hits, rerank_scores):

        payload = hit.payload or {}

        result = {
            "uuid": payload.get("uuid", ""),
            "title": payload.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "author": payload.get("author", "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"),
            "annotation": payload.get("annotation", ""),
            "page_url": payload.get("page_url", ""),
            "image_url": payload.get("image_url", ""),
            "search_score": (
                round(float(hit.score), 4) if hit.score is not None else None
            ),
            "rerank_score": float(rerank_score),
        }

        results.append(result)

    results.sort(key=lambda item: item["rerank_score"], reverse=True)

    return results[:top_k]


def generate_answer(
    client: Groq,
    persona_prompt: str,
    query: str,
    results: List[Dict[str, object]],
    temperature: float,
    max_tokens: int,
) -> str:

    if not results:

        return "–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."

    context_text = format_results(results)

    messages = [
        {"role": "system", "content": persona_prompt.strip()},
        {
            "role": "user",
            "content": (
                f"–ó–∞–ø—Ä–æ—Å —á–∏—Ç–∞—Ç–µ–ª—è: {query.strip()}\n" f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏: {context_text}"
            ),
        },
    ]

    response = client.chat.completions.create(
        model="openai/gpt-oss-120b",
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )

    return response.choices[0].message.content.strip()


def render_sources(items: List[Dict[str, object]]) -> None:
    for idx, book in enumerate(items, start=1):
        title = str(book.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        author = str(book.get("author") or "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        st.write(f"{idx}. {title} - {author}")
        link = (book.get("page_url") or "").strip()
        if link:
            st.write(link)
        score_bits: List[str] = []
        similarity = book.get("search_score")
        if similarity is not None:
            score_bits.append(f"similarity: {similarity}")
        rerank = book.get("rerank_score")
        if rerank is not None:
            score_bits.append(f"rerank score: {float(rerank):.4f}")
        if score_bits:
            st.caption(", ".join(score_bits))
        annotation = (book.get("annotation") or "").strip()
        if annotation:
            st.caption(annotation)


def main() -> None:

    st.set_page_config(page_title="Find My Book Chat")

    st.title("–ß–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥")
    st.subheader("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

    with st.sidebar:

        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        persona_name = st.selectbox("–õ–∏—á–Ω–æ—Å—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", list(PERSONAS.keys()))

        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.0, 1.0, 0.5, 0.1)

        top_k = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥", 1, 5, 3)

        show_sources = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏", value=True)

        if st.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):

            st.session_state.pop("history", None)

            rerun_app()

    groq_api_key = read_secret("GROQ_API_KEY").strip()

    qdrant_url = read_secret("QDRANT_URL").strip()

    qdrant_api_key = read_secret("QDRANT_API_KEY").strip()

    collection_name = (
        read_secret("QDRANT_COLLECTION").strip()
        or os.getenv("QDRANT_COLLECTION", "books_by_annotation")
    ).strip()

    if not groq_api_key or not qdrant_url or not qdrant_api_key:
        st.info(
            "–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ Groq –∏ Qdrant –≤ secrets.toml –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥."
        )
        return

    embedding_model = load_embedding_model(DEVICE)
    reranker = load_reranker(DEVICE)
    qdrant_client = get_qdrant_client(qdrant_url, qdrant_api_key)
    groq_client = get_groq_client(groq_api_key)
    persona_prompt = PERSONAS[persona_name]
    assistant_avatar = PERSONA_AVATARS.get(persona_name, DEFAULT_ASSISTANT_AVATAR)
    fetch_limit = max(top_k * 4, 12)

    if "history" not in st.session_state:
        st.session_state.history = []

    for message in st.session_state.history:
        role = message["role"]
        stored_avatar = message.get("avatar")
        persona = message.get("persona")
        avatar = stored_avatar or (
            PERSONA_AVATARS.get(persona, DEFAULT_ASSISTANT_AVATAR)
            if role == "assistant"
            else USER_AVATAR
        )
        with st.chat_message(role, avatar=avatar):
            st.markdown(message["content"])
            if role == "assistant" and show_sources and message.get("sources"):
                with st.expander("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏", expanded=False):
                    render_sources(message["sources"])

    prompt = st.chat_input("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å")
    if not prompt:
        return

    st.session_state.history.append({"role": "user", "content": prompt, "avatar": USER_AVATAR})
    with st.chat_message("user", avatar=USER_AVATAR):
        st.markdown(prompt)

    assistant_reply = ""
    retrieved: List[Dict[str, object]] = []

    with st.chat_message("assistant", avatar=assistant_avatar):
        with st.spinner("–°–æ–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
            try:
                retrieved = search_books(
                    qdrant_client,
                    embedding_model,
                    reranker,
                    prompt,
                    collection_name.strip(),
                    top_k,
                    fetch_limit,
                )
            except Exception as error:
                assistant_reply = f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {error}"
                st.error(assistant_reply)

        if not assistant_reply:
            if not retrieved:
                assistant_reply = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            else:
                try:
                    assistant_reply = generate_answer(
                        groq_client,
                        persona_prompt,
                        prompt,
                        retrieved,
                        temperature,
                        max_tokens=900,
                    )
                except Exception as error:
                    assistant_reply = f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {error}"

        st.markdown(assistant_reply)
        if show_sources and retrieved:
            with st.expander("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏", expanded=False):
                render_sources(retrieved)

    st.session_state.history.append(
        {
            "role": "assistant",
            "content": assistant_reply,
            "sources": retrieved if retrieved else [],
            "persona": persona_name,
            "avatar": assistant_avatar,
        }
    )


if __name__ == "__main__":

    main()
